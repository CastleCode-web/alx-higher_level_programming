>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]
>>> matrix_mul([[1, 2], [3, 4]], [[3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 63, in matrix_mul
    raise ValueError("m_a and m_b can't be multiplied")
ValueError: m_a and m_b can't be multiplied
>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]
>>> matrix_mul('a', [[1,2], [3,4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 39, in matrix_mul
    raise TypeError("m_a must be a list")
TypeError: m_a must be a list
>>> matrix_mul('a', 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 39, in matrix_mul
    raise TypeError("m_a must be a list")
TypeError: m_a must be a list
>>> matrix_mul([[1,2], [3,4]], 'a')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 51, in matrix_mul
    raise TypeError("m_b must be a list")
TypeError: m_b must be a list
>>> matrix_mul([[1,2], [3,4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'
>>> matrix_mul([1,2], [3,4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 43, in matrix_mul
    raise TypeError("m_a must be a list of lists")
TypeError: m_a must be a list of lists
>>> matrix_mul([[1,2], [3,4]], [1,3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 55, in matrix_mul
    raise TypeError("m_b must be a list of lists")
TypeError: m_b must be a list of lists
>>> matrix_mul([[1,2], [3,4]], [])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 53, in matrix_mul
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> matrix_mul([[], []], [1,3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 45, in matrix_mul
    raise ValueError("m_a can't be empty")
ValueError: m_a can't be empty
>>> matrix_mul([[1,2], [3,4]], [[], []])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 57, in matrix_mul
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> matrix_mul([[1, 2]], [[3, 4], [5, 'a']])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 59, in matrix_mul
    raise TypeError("m_b should contain only integers or floats")
TypeError: m_b should contain only integers or floats
>>> matrix_mul([[1, '2']], [[3, 4], [5, 6]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 47, in matrix_mul
    raise TypeError("m_a should contain only integers or floats")
TypeError: m_a should contain only integers or floats
>>> matrix_mul([[1, '2']], [[3, 4], [5, 6, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 47, in matrix_mul
    raise TypeError("m_a should contain only integers or floats")
TypeError: m_a should contain only integers or floats
>>> matrix_mul([[1, 2]], [[3, 4], [5, 6, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 61, in matrix_mul
    raise TypeError("each row of m_b must be of the same size")
TypeError: each row of m_b must be of the same size
>>> matrix_mul([[1, 2, 4]], [[3, 4], [5, 6]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 63, in matrix_mul
    raise ValueError("m_a and m_b can't be multiplied")
ValueError: m_a and m_b can't be multiplied
>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 49, in matrix_mul
    raise TypeError("each row of m_a must be of the same size")
TypeError: each row of m_a must be of the same size
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 5], [3, 4]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 61, in matrix_mul
    raise TypeError("each row of m_b must be of the same size")
TypeError: each row of m_b must be of the same size

